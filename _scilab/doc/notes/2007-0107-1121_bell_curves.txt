simplest bell curve possible:

> y = %e ^ (-abs(x^f/2));

generates a bell curve with height of 1, and centered at the line x=0

* optimizing the function:
  * 200 averaged trial runs @ 1000 consecutive cycles each
  * Intel Pentium 4 3.40 (3.39) GHz, 0.99 GB of RAM / Windows XP
  * x = -10:0.01:10; // (2001 entries)
  * f = 2; // (exponent applied to x)

y = %e ^ (-abs(x^2/2));		0.00052762 seconds
y = %e ^ (-abs(x^f/2));		0.00052685 seconds (*)
if modulo(f,2); y = %e ^ (-abs(x^f/2)); else; y = %e ^ (x^f/2); end
	f = 2			0.00054875 seconds
	f = 3			0.00056283 seconds
y = 1 ./ %e ^ abs(x^2/2);	0.00054735 seconds

* making the peak jump
  * c is where the center should be, with respect to x values
> y = %e ^ (-abs((x-c)^f/2));

* crossing points (use for note span)
  * finding
    - no matter what the value of f, y = %e ^ (-abs((x-c)^f/2)) will contain the
      points { (c-1, 1/sqrt(%e)), (c+1, 1/sqrt(%e)) }.
    - for all values of f, c & w, y = %e ^ (-abs((x-c)^f/w)) will contain the
      points { (c-1, 1/%e^(1/w)), (c+1, 1/%e^(1/w)) }.
    * for all values of f, c, s & w, y = %e ^ (-abs((x/s-c)^f/w)) will contain
      the points { (c-s, 1/%e^(1/w)), (c+s, 1/%e^(1/w)) }.
  * changing with respect to x
    > y = %e ^ (-abs((x/s-c)^f/w))
    * scales the curve such that for all values of f, they all cross at x = c+-s

* ideas for expansion
  * y = %e ^ (-abs((x - c) ^ f / w))
    * c is where the peak should lie
    * f is the exponent (higher exponents flatten the top and steepen the sides)
    * w is an expression of the 'width' of the curve.
      * found: the slope of the line at x=c-w/2 is about equal to its y value,
        and the slope at x=c+w/2 is about equal to the negation of its y value.
  * final idea (maximum flexibility):
    > y = h * %e ^ (-abs((x / s - c) ^ f / w))
    * provides:
      * 2 dimensions of curve shape (f & w)
      * 2 dimensions of curve scaling (s on x dimension & h on y dimension)
      * 1 dimension of curve translation (c on x dimension)
